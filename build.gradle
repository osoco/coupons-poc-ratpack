buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "io.ratpack:ratpack-gradle:1.3.3"
    classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
  }
}

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "idea"
apply plugin: "eclipse"

repositories {
  jcenter()
}

dependencies {
  // Default SLF4J binding.  Note that this is a blocking implementation.
  // See here for a non blocking appender http://logging.apache.org/log4j/2.x/manual/async.html
  runtime 'org.slf4j:slf4j-simple:1.7.12'
  runtime 'ch.qos.logback:logback-classic:1.1.3'
  runtime 'javax.el:javax.el-api:2.2.4'

  compile 'org.hibernate:hibernate-validator:5.1.3.Final'
  compile 'com.h2database:h2:1.4.190'
  compile ratpack.dependency('hikari')

  testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestCompile.extendsFrom testCompile
  functionalTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/groovy')
    }
    resources.srcDir file('src/integration-test/resources')
  }
  functionalTest {
    groovy {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functional-test/groovy')
    }
    resources.srcDir file('src/functional-test/resources')
  }
}

task integrationTest(type: Test) {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
}

task functionalTest(type: Test) {
  testClassesDir = sourceSets.functionalTest.output.classesDir
  classpath = sourceSets.functionalTest.runtimeClasspath
  outputs.upToDateWhen { false }
}

task stage {
  dependsOn installDist
}

tasks.withType(Test) {
  reports.html.destination = file("${reporting.baseDir}/${name}")
}

check.dependsOn integrationTest
check.dependsOn functionalTest
integrationTest.mustRunAfter test
functionalTest.mustRunAfter integrationTest